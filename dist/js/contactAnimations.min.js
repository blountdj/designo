export const introLogoFadeIn = () => { let t = document.querySelector(".intro-logo__image"); gsap.to(t, { opacity: 1, duration: 2.5, ease: "power2.out" }) }; export const navBarLinksFadeIn = () => { let t = document.querySelectorAll(".nav-menu__link"), o = document.querySelector(".navbar__link-block > img"); gsap.to([o, ...t], { opacity: 1, duration: .5, stagger: .1, ease: "power3.inout" }) }; export const xPercentOpacityReturn = t => { gsap.to(t, { xPercent: 0, opacity: 1, duration: .6, ease: "power3.inout" }) }; export const yPercentOpacityReturn = t => { gsap.to(t, { yPercent: 0, opacity: 1, duration: .6, ease: "power3.inout" }) }; export const xPercentOpacityReturnStaggered = t => { gsap.to(t, { xPercent: 0, opacity: 1, duration: .6, ease: "power3.inout", stagger: .1 }) }; export const yPercentOpacityReturnStaggered = t => { gsap.to(t, { yPercent: 0, opacity: 1, duration: .6, ease: "power3.inout", stagger: .1 }) }; export const unMaskToLeft = t => { gsap.to(t, { clipPath: "polygon(0% 0%, 0% 0%, 0% 100%, 0% 100%)", xPercent: 0, duration: 1.5, ease: "power3.inout" }) }; export const unMaskToRight = t => { gsap.to(t, { clipPath: "polygon(100% 0%, 100% 0%, 100% 100%, 100% 100%)", xPercent: 0, duration: 1.5, ease: "power3.inout" }) }; export const scaleTo1 = (t, o = !1) => { gsap.to(t, { scale: 1, opacity: 1, duration: .6, ease: "power3.inout", stagger: o ? .1 : 0, clearProps: !0 }) }; export const fadeIn = t => { gsap.to(t, { opacity: 1, duration: .6, ease: "power3.inout" }) }; export const introOverlayFadeIn = () => new Promise(t => { gsap.set(".intro-logo__image", { opacity: 0 }), gsap.to([".intro-overlay", ".transition"], { autoAlpha: 1, duration: .6, ease: "power3.inout", onComplete: t }) }); let tlColumnsAnimation = gsap.timeline({ paused: !0, defaults: { ease: "power4inOut" } }); tlColumnsAnimation.to(".transition__column", { duration: 1, scaleX: 2, stagger: .025, delay: .5 }); export const animationColumnsEnter = () => new Promise(t => { tlColumnsAnimation.play().then(t) }); export const animationColumnsLeave = () => new Promise(t => { tlColumnsAnimation.reverse().then(t) }); export const transitionAnimationReset = () => { gsap.set(".intro-overlay", { autoAlpha: 0 }), gsap.set(".transition", { autoAlpha: 0 }), gsap.set(".transition__column", { scaleX: 0 }), animationColumnsLeave() };